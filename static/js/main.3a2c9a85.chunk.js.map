{"version":3,"sources":["components/camera/cameraFeed.js","App.js","serviceWorker.js","index.js"],"names":["LgDiv","styled","div","SmDiv","Buttons","MyButton","Button","CameraFeed","useState","filter","setFilter","videoPlayer","useRef","canvas","processDevices","useCallback","devices","forEach","device","console","log","label","setDevice","useEffect","a","navigator","mediaDevices","enumerateDevices","cameras","getCamera","deviceId","getUserMedia","audio","video","then","stream","current","srcObject","catch","err","play","turnCameraOn","Navbar","bg","variant","Toggle","aria-controls","Collapse","id","Nav","className","onClick","getVideoTracks","track","stop","ref","width","style","height","getContext","drawImage","e","toBlob","blob","anchor","document","createElement","download","href","URL","createObjectURL","click","revokeObjectURL","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.3a2c9a85.chunk.js","sourcesContent":["import React, { Fragment, useCallback, useState, useEffect, useRef } from 'react'\nimport { Button } from 'react-bootstrap'\nimport styled from 'styled-components'\nimport { Navbar, Nav } from 'react-bootstrap'\n\nconst LgDiv = styled.div`\n  &:media (min-width: 992px) {\n    flex: 0 0 50%;\n    max-width: 50%;\n  }\n`\nconst SmDiv = styled.div`\n  &:media (min-width: 992px) {\n    flex: 0 0 50%;\n    max-width: 50%;\n  }\n`\n\nconst Buttons = styled.div`\n  margin: 50px 500px 0 500px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`\n\nconst MyButton = styled(Button)`\n  width: 120px;\n  height: 50px;\n`\n\n\nconst CameraFeed = () => {\n  const [filter, setFilter] = useState(null)\n  const videoPlayer = useRef(null)\n  const canvas = useRef(null)\n\n  const processDevices = useCallback((devices) => {\n    devices.forEach(device => {\n      console.log('Device:', device.label)\n      setDevice(device)\n    })\n  })\n\n  useEffect(() => {\n    console.log(navigator.mediaDevices.enumerateDevices())\n    async function getCamera() {\n      console.log('enumerate devices:', navigator.mediaDevices.enumerateDevices())\n      const cameras = await navigator.mediaDevices.enumerateDevices()\n      processDevices(cameras)\n    }\n    getCamera()\n  }, [processDevices])\n\n\n\n  const setDevice = async (device) => {\n    const { deviceId } = device\n    const stream = await navigator.mediaDevices.getUserMedia({ audio: false, video: { deviceId } })\n      .then(stream => videoPlayer.current.srcObject = stream)\n      .catch(err => console.log(err))\n    videoPlayer.current.play()\n  }\n\n  const turnCameraOff = () => {\n    videoPlayer.current.srcObject.getVideoTracks().forEach(track => track.stop())\n  }\n\n  const turnCameraOn = async () => {\n    const cameras = await navigator.mediaDevices.enumerateDevices()\n    processDevices(cameras)\n  }\n\n  const takePhoto = () => {\n    const context = canvas.current.getContext('2d')\n    context.drawImage(videoPlayer.current, 0, 0, canvas.current.width, canvas.current.height)\n  }\n\n  const savePhoto = () => {\n  canvas.current.toBlob(\n    blob => {\n      const anchor = document.createElement('a')\n      anchor.download = 'my-file-name.jpg'\n      anchor.href = URL.createObjectURL(blob)\n      anchor.click()\n      URL.revokeObjectURL(anchor.href)\n    },\n    'image/jpeg',\n    0.9,\n  )\n}\n\n  return (\n    <Fragment>\n        <Navbar bg=\"dark\" variant=\"dark\">\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n          <Navbar.Collapse id=\"basic-navbar-nav\">\n            <Nav className=\"mr-auto\">\n              <Button variant='dark' className='mr-2' onClick={() => turnCameraOn()}>Turn on Camera</Button>\n              <Button variant='dark' className='mr-2' onClick={() => turnCameraOff()}>Turn off Camera</Button>\n            </Nav>\n          </Navbar.Collapse>\n        </Navbar>\n      <div className=\"row\">\n        <LgDiv className=\"col-lg-6\">\n          <video ref={videoPlayer} width=\"1020\"/>\n        </LgDiv>\n        <SmDiv className=\"col-lg-4\">\n          <canvas className='canvas' style={{filter: filter}} width=\"1020\" height=\"575\" ref={canvas} />\n        </SmDiv>\n      </div>\n      <Buttons>\n        <MyButton variant='dark' onClick={() => takePhoto()}>Take photo!</MyButton>\n        <MyButton variant='info' onClick={() => setFilter(null)}>Normal</MyButton>\n        <MyButton variant='info' onClick={() => setFilter(\"grayscale(1)\")}>Greyscale</MyButton>\n        <MyButton variant='info' onClick={() => setFilter(\"sepia(1)\")}>Sepia</MyButton>\n        <MyButton variant='info' onClick={() => setFilter(\"saturate(8)\")}>Saturate</MyButton>\n        <MyButton variant='info' onClick={() => setFilter(\"saturate(1.5) contrast(1.3) blur(0.2px) brightness(1.1)\")}>Lomo</MyButton>\n        <MyButton variant='info' onClick={() => setFilter(\"blur(5px) opacity(0.6)\")}>blur</MyButton>\n        <MyButton onClick={(e) => savePhoto(e)}>Save photo!</MyButton>\n      </Buttons>\n    </Fragment>\n  )\n}\n\nexport default CameraFeed\n","import React from 'react';\nimport './App.css';\nimport Camera from './components/camera/cameraFeed'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Camera />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}